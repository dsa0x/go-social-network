
# Start from the latest golang base image
FROM golang:latest as builder

# Add Maintainer Info
LABEL maintainer="Dare Samsondeen <dsamsondeen@gmail.com>"

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed
RUN go mod download
RUN go mod verify

# Copy the source from the current directory to the Working Directory inside the container
COPY . .

# Build the Go app
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .


######## Start a new stage from scratch #######
FROM alpine:latest  

RUN apk --no-cache add ca-certificates

WORKDIR /root/



# Copy the Pre-built binary file from the previous stage
COPY --from=builder /app/main .

# RUN go get
# RUN go install

# Expose port 8080 to the outside world
EXPOSE 8080

ENTRYPOINT /app

# Command to run the executable
CMD ["./main"] 



############################
# STEP 1 build executable binary
############################
# FROM golang:alpine AS builder 
# # Install git.
# # Git is required for fetching the dependencies.
# RUN ls
# RUN apk update && apk add --no-cache git

# WORKDIR /app

# # Copy go mod and sum files
# # COPY go.mod go.sum ./
# CMD [ "ls" ]

# COPY . .
# # Fetch dependencies.
# RUN go mod download
# RUN go mod verify


# # Build the binary.
# RUN GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o /go/bin/app ./src

# ############################
# # STEP 2 build a small image
# ############################
# FROM alpine

# # Copy our static executable.
# COPY --from=builder /go/bin/app /go/bin/app


# # Run the hello binary.
# ENTRYPOINT ["/go/bin/app"]
